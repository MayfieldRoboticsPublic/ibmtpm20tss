#################################################################################
#										#
#		AIX TPM2 Utilities Makefile					#
#			     Written by Ken Goldman				#
#		       IBM Thomas J. Watson Research Center			#
#	      $Id: makefile.aix 730 2016-08-23 21:09:53Z kgoldman $		#
#										#
# (c) Copyright IBM Corporation 2015						#
# 										#
# All rights reserved.								#
# 										#
# Redistribution and use in source and binary forms, with or without		#
# modification, are permitted provided that the following conditions are	#
# met:										#
# 										#
# Redistributions of source code must retain the above copyright notice,	#
# this list of conditions and the following disclaimer.				#
# 										#
# Redistributions in binary form must reproduce the above copyright		#
# notice, this list of conditions and the following disclaimer in the		#
# documentation and/or other materials provided with the distribution.		#
# 										#
# Neither the names of the IBM Corporation nor the names of its			#
# contributors may be used to endorse or promote products derived from		#
# this software without specific prior written permission.			#
# 										#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		#
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		#
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		#
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT		#
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,	#
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT		#
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,		#
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY		#
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT		#
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE		#
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		#
#										#
#################################################################################

###
#
#	NOTE:  use gnu 'gmake', not the AIX 'make'
#
#	Need env variable LIBPATH=.
#
###

CC = /usr/bin/gcc

CCFLAGS = 				\
	-DTPM_POSIX			\

#	-DTPM_INTERFACE_TYPE_DEFAULT="\"dev\""

# compile - for TSS library

CCLFLAGS = 	-I. -I../src -DTPM_TSS

# compile - for applications

CCAFLAGS = 	-I.

# link - common flags flags TSS library and applications

LNFLAGS =	-lcrypto		\
		-DTPM_POSIX

# shared library

LIBTSSA=libtss.a
LIBTSS=libtss.so

# executable extension

EXE=

include makefile-common

# default build target

all:	$(ALL)

# TSS library source shared with TPM

Marshal.c:			../src/Marshal.c
				ln -s ../src/Marshal.c .
Unmarshal.c:			../src/Unmarshal.c
				sed '/TPM_TSS/a #define TPM_TSS' ../src/Unmarshal.c > Unmarshal.c
CpriSym.c:			../src/CpriSym.c
				ln -s ../src/CpriSym.c .
CpriHash.c:			../src/CpriHash.c
				ln -s ../src/CpriHash.c .
Commands.c:			../src/Commands.c
				ln -s ../src/Commands.c .
CommandAttributeData.c:		../src/CommandAttributeData.c
				ln -s ../src/CommandAttributeData.c .
ntc2lib.c:			../src/ntc2lib.c
				ln -s ../src/ntc2lib.c .


# TSS shared library source

tss.o: 		$(TSS_HEADERS) tss.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tss.c
tssproperties.o: $(TSS_HEADERS) tssproperties.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssproperties.c
tssauth.o: 	$(TSS_HEADERS) tssauth.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssauth.c
tssmarshal.o: 	$(TSS_HEADERS) tssmarshal.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssmarshal.c
tsscrypto.o: 	$(TSS_HEADERS) tsscrypto.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tsscrypto.c
tssutils.o: 	$(TSS_HEADERS) tssutils.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssutils.c
tsssocket.o: 	$(TSS_HEADERS) tsssocket.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tsssocket.c
tssdev.o: 	$(TSS_HEADERS) tssdev.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssdev.c
tsstransmit.o: 	$(TSS_HEADERS) tsstransmit.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tsstransmit.c
tssresponsecode.o: $(TSS_HEADERS) tssresponsecode.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssresponsecode.c
tssccattributes.o: $(TSS_HEADERS) tssccattributes.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssccattributes.c
fail.o: 	$(TSS_HEADERS) fail.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC fail.c
tssprint.o: 	$(TSS_HEADERS) tssprint.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssprint.c
Marshal.o: 	$(TSS_HEADERS) Marshal.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC Marshal.c
Unmarshal.o: 	$(TSS_HEADERS) Unmarshal.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC Unmarshal.c
Commands.o: 	$(TSS_HEADERS) Commands.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC Commands.c
CommandAttributeData.o: 	$(TSS_HEADERS) CommandAttributeData.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC CommandAttributeData.c
CpriHash.o: 	$(TSS_HEADERS) CpriHash.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC CpriHash.c
CpriSym.o: 	$(TSS_HEADERS) CpriSym.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC CpriSym.c
ntc2lib.o:	$(TSS_HEADERS) ntc2lib.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC ntc2lib.c
tssntc.o:	$(TSS_HEADERS) tssntc.c
		$(CC) $(CCFLAGS) $(CCLFLAGS) -fPIC tssntc.c

# TSS shared library build

$(LIBTSS): 	$(TSS_OBJS)
		$(CC) $(LNFLAGS) -shared -o $(LIBTSS) $(TSS_OBJS)

libtss.a:	$(LIBTSS)
		ar -cr libtss.a $(LIBTSS)

.PHONY:		clean
.PRECIOUS:	%.o

clean:		
		rm -f *.o  *~ 	\
		../src/*.o	\
		h*.bin		\
		$(LIBTSS) 	\
		libtss.a	\
		$(ALL)

# applications

activatecredential:	tss2/tss.h activatecredential.o
			$(CC) $(LNFLAGS) -L. activatecredential.o -ltss -o activatecredential
eventextend:		eventextend.o eventlib.o
			$(CC) $(LNFLAGS) -L. eventextend.o eventlib.o -ltss -o eventextend
certify:		tss2/tss.h certify.o 
			$(CC) $(LNFLAGS) -L. certify.o -ltss -o certify
changeeps:		tss2/tss.h changeeps.o 
			$(CC) $(LNFLAGS) -L. changeeps.o -ltss -o changeeps
changepps:		tss2/tss.h changepps.o 
			$(CC) $(LNFLAGS) -L. changepps.o -ltss -o changepps
clear:			tss2/tss.h clear.o 
			$(CC) $(LNFLAGS) -L. clear.o -ltss -o clear
clearcontrol:		tss2/tss.h clearcontrol.o 
			$(CC) $(LNFLAGS) -L. clearcontrol.o -ltss -o clearcontrol
clockrateadjust:	tss2/tss.h clockrateadjust.o 
			$(CC) $(LNFLAGS) -L. clockrateadjust.o -ltss -o clockrateadjust
clockset:		tss2/tss.h clockset.o 
			$(CC) $(LNFLAGS) -L. clockset.o -ltss -o clockset
contextload:		tss2/tss.h contextload.o 
			$(CC) $(LNFLAGS) -L. contextload.o -ltss -o contextload
contextsave:		tss2/tss.h contextsave.o 
			$(CC) $(LNFLAGS) -L. contextsave.o -ltss -o contextsave
create:			tss2/tss.h create.o objecttemplates.o 
			$(CC) $(LNFLAGS) -L. create.o objecttemplates.o -ltss -o create
createprimary:		tss2/tss.h createprimary.o objecttemplates.o 
			$(CC) $(LNFLAGS) -L. createprimary.o objecttemplates.o -ltss -o createprimary
dictionaryattacklockreset:		tss2/tss.h dictionaryattacklockreset.o 
			$(CC) $(LNFLAGS) -L. dictionaryattacklockreset.o -ltss -o dictionaryattacklockreset
dictionaryattackparameters:		tss2/tss.h dictionaryattackparameters.o 
			$(CC) $(LNFLAGS) -L. dictionaryattackparameters.o -ltss -o dictionaryattackparameters
duplicate:		tss2/tss.h duplicate.o 
			$(CC) $(LNFLAGS) -L. duplicate.o -ltss -o duplicate 
eccparameters:		tss2/tss.h eccparameters.o  
			$(CC) $(LNFLAGS) -L. eccparameters.o -ltss -o eccparameters 
encryptdecrypt:		tss2/tss.h encryptdecrypt.o 
			$(CC) $(LNFLAGS) -L. encryptdecrypt.o -ltss -o encryptdecrypt	
eventsequencecomplete:	tss2/tss.h eventsequencecomplete.o 
			$(CC) $(LNFLAGS) -L. eventsequencecomplete.o -ltss -o eventsequencecomplete	
evictcontrol:		tss2/tss.h evictcontrol.o 
			$(CC) $(LNFLAGS) -L. evictcontrol.o -ltss -o evictcontrol	
flushcontext:		tss2/tss.h flushcontext.o 
			$(CC) $(LNFLAGS) -L. flushcontext.o -ltss -o flushcontext
getcommandauditdigest:	tss2/tss.h getcommandauditdigest.o 
			$(CC) $(LNFLAGS) -L. getcommandauditdigest.o -ltss -o getcommandauditdigest
getcapability:		tss2/tss.h getcapability.o 
			$(CC) $(LNFLAGS) -L. getcapability.o -ltss -o getcapability
getrandom:		tss2/tss.h getrandom.o 
			$(CC) $(LNFLAGS) -L. getrandom.o -ltss -o getrandom
getsessionauditdigest:	tss2/tss.h getsessionauditdigest.o 
			$(CC) $(LNFLAGS) -L. getsessionauditdigest.o -ltss -o getsessionauditdigest
gettime:		tss2/tss.h gettime.o 
			$(CC) $(LNFLAGS) -L. gettime.o -ltss -o gettime
hashsequencestart:	tss2/tss.h hashsequencestart.o 
			$(CC) $(LNFLAGS) -L. hashsequencestart.o -ltss -o hashsequencestart
hash:			tss2/tss.h hash.o 
			$(CC) $(LNFLAGS) -L. hash.o -ltss -o hash
hierarchycontrol:	tss2/tss.h hierarchycontrol.o 
			$(CC) $(LNFLAGS) -L. hierarchycontrol.o -ltss -o hierarchycontrol
hierarchychangeauth:	tss2/tss.h hierarchychangeauth.o 
			$(CC) $(LNFLAGS) -L. hierarchychangeauth.o -ltss -o hierarchychangeauth
hmac:			tss2/tss.h hmac.o 
			$(CC) $(LNFLAGS) -L. hmac.o -ltss -o hmac
hmacstart:		tss2/tss.h hmacstart.o 
			$(CC) $(LNFLAGS) -L. hmacstart.o -ltss -o hmacstart
import:			tss2/tss.h import.o 
			$(CC) $(LNFLAGS) -L. import.o -ltss -o import
load:			tss2/tss.h load.o 
			$(CC) $(LNFLAGS) -L. load.o -ltss -o load
loadexternal:		tss2/tss.h loadexternal.o 
			$(CC) $(LNFLAGS) -L. loadexternal.o -ltss -o loadexternal
makecredential:		tss2/tss.h makecredential.o
			$(CC) $(LNFLAGS) -L. makecredential.o -ltss -o makecredential
nvcertify:		tss2/tss.h nvcertify.o 
			$(CC) $(LNFLAGS) -L. nvcertify.o -ltss -o nvcertify
nvchangeauth:		tss2/tss.h nvchangeauth.o 
			$(CC) $(LNFLAGS) -L. nvchangeauth.o -ltss -o nvchangeauth
nvdefinespace:		tss2/tss.h nvdefinespace.o 
			$(CC) $(LNFLAGS) -L. nvdefinespace.o -ltss -o nvdefinespace
nvextend:		tss2/tss.h nvextend.o 
			$(CC) $(LNFLAGS) -L. nvextend.o -ltss -o nvextend
nvglobalwritelock:	tss2/tss.h nvglobalwritelock.o 
			$(CC) $(LNFLAGS) -L. nvglobalwritelock.o -ltss -o nvglobalwritelock
nvincrement:		tss2/tss.h nvincrement.o 
			$(CC) $(LNFLAGS) -L. nvincrement.o -ltss -o nvincrement
nvread:			tss2/tss.h nvread.o 
			$(CC) $(LNFLAGS) -L. nvread.o -ltss -o nvread
nvreadlock:		tss2/tss.h nvreadlock.o 
			$(CC) $(LNFLAGS) -L. nvreadlock.o -ltss -o nvreadlock
nvreadpublic:		tss2/tss.h nvreadpublic.o 
			$(CC) $(LNFLAGS) -L. nvreadpublic.o -ltss -o nvreadpublic
nvsetbits:		tss2/tss.h nvsetbits.o 
			$(CC) $(LNFLAGS) -L. nvsetbits.o -ltss -o nvsetbits
nvundefinespace:	tss2/tss.h nvundefinespace.o 
			$(CC) $(LNFLAGS) -L. nvundefinespace.o -ltss -o nvundefinespace
nvundefinespacespecial:	tss2/tss.h nvundefinespacespecial.o 
			$(CC) $(LNFLAGS) -L. nvundefinespacespecial.o -ltss -o nvundefinespacespecial
nvwrite:		tss2/tss.h nvwrite.o 
			$(CC) $(LNFLAGS) -L. nvwrite.o -ltss -o nvwrite
nvwritelock:		tss2/tss.h nvwritelock.o 
			$(CC) $(LNFLAGS) -L. nvwritelock.o -ltss -o nvwritelock
objectchangeauth:	tss2/tss.h objectchangeauth.o 
			$(CC) $(LNFLAGS) -L. objectchangeauth.o -ltss -o objectchangeauth
pcrallocate: 		tss2/tss.h pcrallocate.o 
			$(CC) $(LNFLAGS) -L. pcrallocate.o -ltss -o pcrallocate
pcrevent: 		tss2/tss.h pcrevent.o 
			$(CC) $(LNFLAGS) -L. pcrevent.o -ltss -o pcrevent
pcrextend: 		tss2/tss.h pcrextend.o 
			$(CC) $(LNFLAGS) -L. pcrextend.o -ltss -o pcrextend
pcrread: 		tss2/tss.h pcrread.o 
			$(CC) $(LNFLAGS) -L. pcrread.o -ltss -o pcrread
pcrreset: 		tss2/tss.h pcrreset.o 
			$(CC) $(LNFLAGS) -L. pcrreset.o -ltss -o pcrreset
policyauthorize:	tss2/tss.h policyauthorize.o 
			$(CC) $(LNFLAGS) -L. policyauthorize.o -ltss -o policyauthorize
policyauthvalue:	tss2/tss.h policyauthvalue.o 
			$(CC) $(LNFLAGS) -L. policyauthvalue.o -ltss -o policyauthvalue
policycommandcode:	tss2/tss.h policycommandcode.o 
			$(CC) $(LNFLAGS) -L. policycommandcode.o -ltss -o policycommandcode
policycphash:		tss2/tss.h policycphash.o 
			$(CC) $(LNFLAGS) -L. policycphash.o -ltss -o policycphash
policycountertimer :	tss2/tss.h policycountertimer.o 
			$(CC) $(LNFLAGS) -L. policycountertimer.o -ltss -o policycountertimer
policygetdigest:	tss2/tss.h policygetdigest.o 
			$(CC) $(LNFLAGS) -L. policygetdigest.o -ltss -o policygetdigest
policymaker:		tss2/tss.h policymaker.o 
			$(CC) $(LNFLAGS) -L. policymaker.o -ltss -o policymaker
policymakerpcr:		tss2/tss.h policymakerpcr.o 
			$(CC) $(LNFLAGS) -L. policymakerpcr.o -ltss -o policymakerpcr
policynv:		tss2/tss.h policynv.o 
			$(CC) $(LNFLAGS) -L. policynv.o -ltss -o policynv
policynvwritten:	tss2/tss.h policynvwritten.o 
			$(CC) $(LNFLAGS) -L. policynvwritten.o -ltss -o policynvwritten
policyor:		tss2/tss.h policyor.o 
			$(CC) $(LNFLAGS) -L. policyor.o -ltss -o policyor
policypassword:		tss2/tss.h policypassword.o 
			$(CC) $(LNFLAGS) -L. policypassword.o -ltss -o policypassword
policypcr:		tss2/tss.h policypcr.o 
			$(CC) $(LNFLAGS) -L. policypcr.o -ltss -o policypcr
policyrestart:		tss2/tss.h policyrestart.o 
			$(CC) $(LNFLAGS) -L. policyrestart.o -ltss -o policyrestart
policysigned:		tss2/tss.h policysigned.o 
			$(CC) $(LNFLAGS) -L. policysigned.o -ltss -o policysigned
policysecret:		tss2/tss.h policysecret.o 
			$(CC) $(LNFLAGS) -L. policysecret.o -ltss -o policysecret
policyticket:		tss2/tss.h policyticket.o 
			$(CC) $(LNFLAGS) -L. policyticket.o -ltss -o policyticket
quote:			tss2/tss.h quote.o 
			$(CC) $(LNFLAGS) -L. quote.o -ltss -o quote
powerup:		tss2/tss.h powerup.o 
			$(CC) $(LNFLAGS) -L. powerup.o -ltss -o powerup
readclock:		tss2/tss.h readclock.o 
			$(CC) $(LNFLAGS) -L. readclock.o -ltss -o readclock
readpublic:		tss2/tss.h readpublic.o 
			$(CC) $(LNFLAGS) -L. readpublic.o -ltss -o readpublic
returncode:		tss2/tss.h returncode.o 
			$(CC) $(LNFLAGS) -L. returncode.o -ltss -o returncode
rewrap:			tss2/tss.h rewrap.o 
			$(CC) $(LNFLAGS) -L. rewrap.o -ltss -o rewrap
rsadecrypt: 		tss2/tss.h rsadecrypt.o 
			$(CC) $(LNFLAGS) -L. rsadecrypt.o -ltss -o rsadecrypt
rsaencrypt: 		tss2/tss.h rsaencrypt.o 
			$(CC) $(LNFLAGS) -L. rsaencrypt.o -ltss -o rsaencrypt
sequenceupdate:		tss2/tss.h sequenceupdate.o 
			$(CC) $(LNFLAGS) -L. sequenceupdate.o -ltss -o sequenceupdate
sequencecomplete:	tss2/tss.h sequencecomplete.o 
			$(CC) $(LNFLAGS) -L. sequencecomplete.o -ltss -o sequencecomplete
shutdown:		tss2/tss.h shutdown.o 
			$(CC) $(LNFLAGS) -L. shutdown.o -ltss -o shutdown
sign:			tss2/tss.h sign.o 
			$(CC) $(LNFLAGS) -L. sign.o -ltss -o sign
setprimarypolicy:	tss2/tss.h setprimarypolicy.o 
			$(CC) $(LNFLAGS) -L. setprimarypolicy.o -ltss -o setprimarypolicy
startauthsession:	tss2/tss.h startauthsession.o 
			$(CC) $(LNFLAGS) -L. startauthsession.o -ltss -o startauthsession
startup:		tss2/tss.h startup.o 
			$(CC) $(LNFLAGS) -L. startup.o -ltss -o startup
stirrandom:		tss2/tss.h stirrandom.o 
			$(CC) $(LNFLAGS) -L. stirrandom.o -ltss -o stirrandom
unseal:			tss2/tss.h unseal.o 
			$(CC) $(LNFLAGS) -L. unseal.o -ltss -o unseal
verifysignature:	tss2/tss.h verifysignature.o 
			$(CC) $(LNFLAGS) -L. verifysignature.o -ltss -o verifysignature

signapp:		tss2/tss.h signapp.o 
			$(CC) $(LNFLAGS) -L. signapp.o -ltss -o signapp
writeapp:		tss2/tss.h writeapp.o 
			$(CC) $(LNFLAGS) -L. writeapp.o -ltss -o writeapp
createek:		tss2/tss.h createek.o ekutils.o 
			$(CC) $(LNFLAGS) -L. createek.o ekutils.o -ltss -o createek
pprovision:		tss2/tss.h pprovision.o ekutils.o 
			$(CC) $(LNFLAGS) -L. pprovision.o ekutils.o -ltss -o pprovision

ntc2getconfig:		tss2/tss.h ntc2getconfig.o ntc2lib.o
			$(CC) $(LNFLAGS) -L. ntc2getconfig.o ntc2lib.o -ltss -o ntc2getconfig
ntc2preconfig:		tss2/tss.h ntc2preconfig.o ntc2lib.o
			$(CC) $(LNFLAGS) -L. ntc2preconfig.o ntc2lib.o -ltss -o ntc2preconfig
ntc2lockconfig:		tss2/tss.h ntc2lockconfig.o ntc2lib.o
			$(CC) $(LNFLAGS) -L. ntc2lockconfig.o ntc2lib.o -ltss -o ntc2lockconfig

%.o:		%.c tss2/tss.h 
		$(CC) $(CCFLAGS) $(CCAFLAGS) $< -o $@

